/*--------------------------------*- C++ -*----------------------------------*\
|       o          |                                                          |
|    o     o       | HELYX                                                  |
|   o   O   o      | Version: v2.5.0                                           |
|    o     o       | Web:     http://www.engys.com                            |
|       o          |                                                          |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version 2.0;
    format ascii;
    class dictionary;
    location system;
    object caseSetupDict;
}

    regions (region0);
    region0
    {
        modificationSwitches
        {
            resetInternalFields true;
            resetBoundaryFields true;
            resetSystemDicts false;
            resetConstDicts false;
            resetBoundaryMesh false;
            deleteUnusedFields false;
            reuseExistingDicts false;
            strictPatchNameChecking false;
        }

        boundaryMesh
        {
            exactNamed
            {
                surface-0-0-255-BLUE1
                {
                    type outlet;
                }

                surface-0-245-0-GREEN2
                {
                    type wall;
                }

                surface-0-250-0-GREEN
                {
                    type wall;
                }

                surface-0-255-0-GREEN
                {
                    type wall;
                }

                surface-255-0-0-RED
                {
                    type patch;
                }

                surface-51-51-51-GRAY20
                {
                    type wall;
                }

            }

            partialNamed
            {
            }

        }

        global
        {
            state ( SIMPLE incompressible ras);
            turbulenceModel kOmegaSST;
            materials (air );
            materialProperties
            {
                air
                {
                    materialName air;
                    transportModel Newtonian;
                    NewtonianCoeffs
                    {
                    }

                    rho rho [1 -3 0 0 0 0 0 ] 1.205;
                    mu mu [1 -1 -1 0 0 0 0 ] 1.9137E-5;
                    nu nu [0 2 -1 0 0 0 0 ] 1.5881327800829875E-5;
                    Cp Cp [0 2 -2 -1 0 0 0 ] 1006.0;
                    Prt Prt [0 0 0 0 0 0 0 ] 0.85;
                    lambda lambda [1 1 -3 -1 0 0 0 ] 0.024;
                    pRef pRef [1 -1 -2 0 0 0 0 ] 101325.0;
                    TRef TRef [0 0 0 1 0 0 0 ] 300.0;
                    Beta Beta [0 0 0 -1 0 0 0 ] 0.00333;
                    Pr Pr [0 0 0 0 0 0 0 ] 0.0;
                }

            }

            constant
            {
                

            }

            system
            {
                fvSchemes
                {
                    ddtSchemes
                    {
                        default steadyState;
                    }

                    gradSchemes
                    {
                        grad(alpha1) edgeCellsLeastSquares;
                        default Gauss linear;
                        grad(nuTilda) cellLimited Gauss linear 1;
                        grad(k) cellLimited Gauss linear 1;
                        grad(kl) cellLimited Gauss linear 1;
                        grad(omega) cellLimited Gauss linear 1;
                        grad(epsilon) cellLimited Gauss linear 1;
                        grad(q) cellLimited Gauss linear 1;
                        grad(zeta) cellLimited Gauss linear 1;
                        grad(v2) cellLimited Gauss linear 1;
                        grad(f) cellLimited Gauss linear 1;
                    }

                    divSchemes
                    {
                        default Gauss linear;
                        div(R) Gauss linear;
                        div((nuEff*dev(grad(U).T()))) Gauss linear;
                        div(phi,U) bounded Gauss linearUpwindV grad(U);
                        div(phi,k) bounded Gauss linearUpwind grad(k);
                        div(phi,epsilon) bounded Gauss linearUpwind grad(epsilon);
                        div(phi,zeta) bounded Gauss linearUpwind grad(zeta);
                        div(phi,q) bounded Gauss linearUpwind grad(q);
                        div(phi,omega) bounded Gauss linearUpwind grad(omega);
                        div(phi,nuTilda) bounded Gauss linearUpwind grad(nuTilda);
                        div(phi,T) bounded Gauss limitedLinear 1;
                        div(phi,kl) bounded Gauss limitedLinear 1;
                        div(phi,kt) bounded Gauss limitedLinear 1;
                        div(phi,R) bounded Gauss upwind;
                        div(phi,v2) bounded Gauss linearUpwind grad(v2);
                        div(phi,f) bounded Gauss linearUpwind grad(f);
                    }

                    interpolationSchemes
                    {
                        default linear;
                        interpolate(HbyA) linear;
                    }

                    laplacianSchemes
                    {
                        default Gauss linear limited 0.333;
                    }

                    snGradSchemes
                    {
                        default limited 0.333;
                    }

                    fluxRequired
                    {
                        default no;
                        p ;
                        pcorr ;
                    }

                }

                fvSolution
                {
                    SIMPLE
                    {
                        nNonOrthogonalCorrectors 0;
                        pRefCell 0;
                        pRefValue 0;
                        residualControl
                        {
                            U 1.0E-5;
                            k 1.0E-5;
                            epsilon 1e-5;
                            omega 1.0E-5;
                            nuTilda 1e-5;
                            T 1e-5;
                            alpha1 1e-5;
                            p_rgh 1e-5;
                            p 1.0E-5;
                            "alpha.*" 1e-5;
                        }

                    }

                    solvers
                    {
                        p
                        {
                            solver GAMG;
                            agglomerator faceAreaPair;
                            mergeLevels 1;
                            cacheAgglomeration true;
                            nCellsInCoarsestLevel 200;
                            tolerance 1e-7;
                            relTol 0.01;
                            smoother GaussSeidel;
                            nPreSweeps 0;
                            nPostSweeps 2;
                            nFinestSweeps 2;
                            minIter 1;
                        }

                        p_rgh
                        {
                            solver GAMG;
                            agglomerator faceAreaPair;
                            mergeLevels 1;
                            cacheAgglomeration true;
                            nCellsInCoarsestLevel 200;
                            tolerance 1e-7;
                            relTol 0.01;
                            smoother GaussSeidel;
                            nPreSweeps 0;
                            nPostSweeps 2;
                            nFinestSweeps 2;
                            minIter 1;
                        }

                        U
                        {
                            solver smoothSolver;
                            smoother GaussSeidel;
                            tolerance 1e-6;
                            relTol 0.1;
                            minIter 1;
                        }

                        k
                        {
                            solver smoothSolver;
                            smoother GaussSeidel;
                            tolerance 1e-6;
                            relTol 0.1;
                            minIter 1;
                        }

                        kl
                        {
                            solver smoothSolver;
                            smoother GaussSeidel;
                            tolerance 1e-6;
                            relTol 0.1;
                            minIter 1;
                        }

                        kt
                        {
                            solver smoothSolver;
                            smoother GaussSeidel;
                            tolerance 1e-6;
                            relTol 0.1;
                            minIter 1;
                        }

                        epsilon
                        {
                            solver smoothSolver;
                            smoother GaussSeidel;
                            tolerance 1e-6;
                            relTol 0.1;
                            minIter 1;
                        }

                        R
                        {
                            solver smoothSolver;
                            smoother GaussSeidel;
                            tolerance 1e-6;
                            relTol 0.1;
                            minIter 1;
                        }

                        nuTilda
                        {
                            solver smoothSolver;
                            smoother GaussSeidel;
                            tolerance 1e-6;
                            relTol 0.1;
                            minIter 1;
                        }

                        omega
                        {
                            solver smoothSolver;
                            smoother GaussSeidel;
                            tolerance 1e-6;
                            relTol 0.1;
                            minIter 1;
                        }

                        h
                        {
                            solver smoothSolver;
                            smoother GaussSeidel;
                            tolerance 1e-6;
                            relTol 0.1;
                            minIter 1;
                        }

                        T
                        {
                            solver smoothSolver;
                            smoother GaussSeidel;
                            tolerance 1e-6;
                            relTol 0.1;
                            minIter 1;
                        }

                        rho
                        {
                            solver PCG;
                            preconditioner DIC;
                            tolerance 0;
                            relTol 0;
                            minIter 1;
                        }

                        v2
                        {
                            solver smoothSolver;
                            smoother GaussSeidel;
                            tolerance 1e-6;
                            relTol 0.1;
                            nSweeps 1;
                        }

                        f
                        {
                            solver smoothSolver;
                            smoother GaussSeidel;
                            tolerance 1e-6;
                            relTol 0.1;
                            nSweeps 1;
                        }

                        q
                        {
                            solver smoothSolver;
                            smoother GaussSeidel;
                            tolerance 1e-6;
                            relTol 0.1;
                            nSweeps 1;
                        }

                        zeta
                        {
                            solver smoothSolver;
                            smoother GaussSeidel;
                            tolerance 1e-6;
                            relTol 0.1;
                            nSweeps 1;
                        }

                    }

                    relaxationFactors
                    {
                        fields
                        {
                            p 0.3;
                            p_rgh 0.3;
                            rho 0.05;
                        }

                        equations
                        {
                            U 0.7;
                            h 0.5;
                            T 0.7;
                            k 0.7;
                            epsilon 0.7;
                            R 0.7;
                            nuTilda 0.7;
                            omega 0.7;
                            kl 0.7;
                            kt 0.7;
                            v2 0.2;
                            f 0.4;
                            q 0.7;
                            zeta 0.7;
                        }

                    }

                }

                fvOptions
                {
                    MRF1_mrf
                    {
                        type MRFSource;
                        active true;
                        selectionMode cellZone;
                        cellZone MRF1;
                        MRFSourceCoeffs
                        {
                            origin ( -0.42131 0.0 0.0 );
                            axis ( 1.0 0.0 0.0 );
                            omega constant 117.285;
                            rotatingPatches ();
                            nonRotatingPatches ();
                            attachedPatches ();
                        }

                    }

                    MRF2_mrf
                    {
                        type MRFSource;
                        active true;
                        selectionMode cellZone;
                        cellZone MRF2;
                        MRFSourceCoeffs
                        {
                            origin ( -0.89031 0.0 0.0 );
                            axis ( 1.0 0.0 0.0 );
                            omega constant 117.285;
                            rotatingPatches ();
                            nonRotatingPatches ();
                            attachedPatches ();
                        }

                    }

                    MRF3_mrf
                    {
                        type MRFSource;
                        active true;
                        selectionMode cellZone;
                        cellZone MRF3;
                        MRFSourceCoeffs
                        {
                            origin ( -1.29131 0.0 0.0 );
                            axis ( 1.0 0.0 0.0 );
                            omega constant 117.285;
                            rotatingPatches ();
                            nonRotatingPatches ();
                            attachedPatches ();
                        }

                    }

                    HE_porous
                    {
                        type explicitPorositySource;
                        active true;
                        selectionMode cellZone;
                        cellZone HE;
                        explicitPorositySourceCoeffs
                        {
                            type powerLaw;
                            powerLawCoeffs
                            {
                                C0 341.1;
                                C1 1.39;
                            }

                        }

                    }

                }

                controlDict
                {
                    startFrom startTime;
                    startTime 0;
                    stopAt endTime;
                    endTime 2000;
                    deltaT 1.0;
                    writeControl timeStep;
                    writeInterval 2000;
                    purgeWrite 0;
                    writeFormat ascii;
                    writePrecision 10;
                    writeCompression uncompressed;
                    timeFormat general;
                    timePrecision 6;
                    graphFormat raw;
                    runTimeModifiable yes;
                    libs ( "libLEMOS-2.2.x.so"  );
                }

            }

        }

        fields
        {
            k
            {
                initialisation
                {
                    type default;
                }

            }

            omega
            {
                initialisation
                {
                    type default;
                }

            }

            nut
            {
                initialisation
                {
                    type default;
                }

            }

            p
            {
                initialisation
                {
                    type potentialFlow;
                }

            }

            U
            {
                initialisation
                {
                    type potentialFlow;
                    initialiseUBCs true;
                }

            }

        }

        boundaryConditions
        {
            regionDefaults
            {
            }

            partialNamed
            {
            }

            exactNamed
            {
                surface-0-0-255-BLUE1
                {
                    U
                    {
                        type inletOutlet;
                        inletValue uniform ( 0 0 0 );
                        value uniform ( 0 0 0 );
                    }

                    p
                    {
                        type fixedValue;
                        value uniform 58.0913;
                    }

                    k
                    {
                        type turbulentIntensityKineticEnergyInlet;
                        intensity 0.05;
                        value uniform 0.1;
                    }

                    omega
                    {
                        type turbulentMixingLengthFrequencyInlet;
                        mixingLength 0.01;
                        phi phi;
                        k k;
                        value uniform 0.1;
                    }

                    nut
                    {
                        type zeroGradient;
                    }

                }

                surface-0-245-0-GREEN2
                {
                    p
                    {
                        type zeroGradient;
                    }

                    U
                    {
                        type movingWallVelocity;
                        value uniform ( 0 0 0 );
                    }

                    k
                    {
                        type kqRWallFunction;
                        value uniform 0.1;
                    }

                    omega
                    {
                        type omegaWallFunction;
                        Cmu 0.09;
                        kappa 0.41;
                        E 9.8;
                        beta1 0.075;
                        value uniform 0.1;
                    }

                    nut
                    {
                        type nutUSpaldingWallFunction;
                        Cmu 0.09;
                        kappa 0.41;
                        E 9.8;
                        value uniform 0.001;
                    }

                }

                surface-0-250-0-GREEN
                {
                    p
                    {
                        type zeroGradient;
                    }

                    U
                    {
                        type movingWallVelocity;
                        value uniform ( 0 0 0 );
                    }

                    k
                    {
                        type kqRWallFunction;
                        value uniform 0.1;
                    }

                    omega
                    {
                        type omegaWallFunction;
                        Cmu 0.09;
                        kappa 0.41;
                        E 9.8;
                        beta1 0.075;
                        value uniform 0.1;
                    }

                    nut
                    {
                        type nutUSpaldingWallFunction;
                        Cmu 0.09;
                        kappa 0.41;
                        E 9.8;
                        value uniform 0.001;
                    }

                }

                surface-0-255-0-GREEN
                {
                    U
                    {
                        type movingWallVelocity;
                        value uniform ( 0 0 0 );
                    }

                    p
                    {
                        type zeroGradient;
                    }

                    k
                    {
                        type kqRWallFunction;
                        value uniform 0.1;
                    }

                    omega
                    {
                        type omegaWallFunction;
                        Cmu 0.09;
                        kappa 0.41;
                        E 9.8;
                        beta1 0.075;
                        value uniform 0.1;
                    }

                    nut
                    {
                        type nutUSpaldingWallFunction;
                        Cmu 0.09;
                        kappa 0.41;
                        E 9.8;
                        value uniform 0.001;
                    }

                }

                surface-255-0-0-RED
                {
                    U
                    {
                        type pressureInletOutletVelocity;
                        value uniform ( 0 0 0);
                    }

                    p
                    {
                        type totalPressure;
                        rho none;
                        gamma 1;
                        p0 uniform 0;
                        value uniform 0;
                    }

                    k
                    {
                        type turbulentIntensityKineticEnergyInlet;
                        intensity 0.05;
                        value uniform 0.1;
                    }

                    omega
                    {
                        type turbulentMixingLengthFrequencyInlet;
                        mixingLength 0.01;
                        phi phi;
                        k k;
                        value uniform 0.1;
                    }

                    nut
                    {
                        type zeroGradient;
                    }

                }

                surface-51-51-51-GRAY20
                {
                    U
                    {
                        type fixedValue;
                        value uniform ( 0 0 0 );
                    }

                    p
                    {
                        type zeroGradient;
                    }

                    k
                    {
                        type kqRWallFunction;
                        value uniform 0.1;
                    }

                    omega
                    {
                        type omegaWallFunction;
                        Cmu 0.09;
                        kappa 0.41;
                        E 9.8;
                        beta1 0.075;
                        value uniform 0.1;
                    }

                    nut
                    {
                        type nutUSpaldingWallFunction;
                        Cmu 0.09;
                        kappa 0.41;
                        E 9.8;
                        value uniform 0.001;
                    }

                }

            }

        }

        functions
        (
        FR1
        {
            type forces;
            functionObjectLibs ( "libforces.so");
            patches (surface-0-255-0-GREEN );
            rhoName rhoInf;
            rhoInf 1.2;
            CofR ( -0.31 0.0 0.0 );//CentreFan_1
            outputControl timeStep;
            outputInterval 1;
        }

        FR2
        {
            type forces;
            functionObjectLibs ( "libforces.so");
            patches (surface-0-250-0-GREEN );
            rhoName rhoInf;
            rhoInf 1.2;
            CofR ( -0.779 0.0 0.0 );//CentreFan_2
            outputControl timeStep;
            outputInterval 1;
        }

        FR3
        {
            type forces;
            functionObjectLibs ( "libforces.so");
            patches (surface-0-245-0-GREEN2 );
            rhoName rhoInf;
            rhoInf 1.2;
            CofR ( -1.18 0.0 0.0 );//CentreFan_3
            outputControl timeStep;
            outputInterval 1;
        }

        SR1_in_u
        {
            type surfaceReport;
            functionObjectLibs ( "libreport.so");
            region region0;
            logToFile true;
            weighting flux;
            fluxName phi;
            homogeneity false;
            fields (U );
            outputControl timeStep;
            outputInterval 1;
            surfaces
            (
            
            {
                type patch;
                name surface-255-0-0-RED;
            }

            );
            constraints
            (
            
            {
                type boundBox;
                min (-1000 -1000 -1000);
                max (1000 1000 1000);
                keepInside true;
            }

            );
        }

        SR2_U_out
        {
            type surfaceReport;
            functionObjectLibs ( "libreport.so");
            region region0;
            logToFile true;
            weighting flux;
            fluxName phi;
            homogeneity false;
            fields (U );
            outputControl timeStep;
            outputInterval 1;
            surfaces
            (
            
            {
                type patch;
                name surface-0-0-255-BLUE1;
            }

            );
            constraints
            (
            
            {
                type boundBox;
                min (-1000 -1000 -1000);
                max (1000 1000 1000);
                keepInside true;
            }

            );
        }

        SR3_in_P
        {
            type surfaceReport;
            functionObjectLibs ( "libreport.so");
            region region0;
            logToFile true;
            weighting flux;
            fluxName phi;
            homogeneity false;
            fields (p );
            outputControl timeStep;
            outputInterval 1;
            surfaces
            (
            
            {
                type patch;
                name surface-255-0-0-RED;
            }

            );
            constraints
            (
            
            {
                type boundBox;
                min (-1000 -1000 -1000);
                max (1000 1000 1000);
                keepInside true;
            }

            );
        }

        SR4_out_p
        {
            type surfaceReport;
            functionObjectLibs ( "libreport.so");
            region region0;
            logToFile true;
            weighting flux;
            fluxName phi;
            homogeneity false;
            fields (p);
            outputControl timeStep;
            outputInterval 1;
            surfaces
            (
            
            {
                type patch;
                name surface-0-0-255-BLUE1;
            }

            );
            constraints
            (
            
            {
                type boundBox;
                min (-1000 -1000 -1000);
                max (1000 1000 1000);
                keepInside true;
            }

            );
        }

        );
    }

    include "$FOAM_CONFIG/caseSetupDict.defaults";
